diff --git a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/CustomCookieJar.java b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/CustomCookieJar.java
new file mode 100644
index 0000000..f4a6af9
--- /dev/null
+++ b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/CustomCookieJar.java
@@ -0,0 +1,78 @@
+package com.reactnativecommunity.webview;
+import android.util.Log;
+import android.webkit.CookieManager;
+import android.webkit.ValueCallback;
+import java.net.URL;
+import java.net.HttpURLConnection;

// don't need?
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;

// idk
+import okhttp3.Cookie;
+import okhttp3.CookieJar;
+import okhttp3.HttpUrl;
+
diff --git a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManager.java b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManager.java
index f743bbc..06d172f 100644
--- a/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManager.java
+++ b/node_modules/react-native-webview/android/src/main/java/com/reactnativecommunity/webview/RNCWebViewManager.java
@@ -5,6 +5,7 @@ import android.annotation.TargetApi;
 import android.app.Activity;
 import android.app.DownloadManager;
 import android.content.Context;
+import android.content.Intent;
 import android.content.pm.ActivityInfo;
 import android.content.pm.PackageManager;
 import android.graphics.Bitmap;
@@ -14,6 +15,7 @@ import android.net.http.SslError;
 import android.net.Uri;
 import android.os.Build;
 import android.os.Environment;
+import android.os.Handler;
 import android.os.Message;
 import android.os.SystemClock;
 import android.text.TextUtils;
@@ -24,12 +26,17 @@ import android.view.View;
 import android.view.ViewGroup;
 import android.view.ViewGroup.LayoutParams;
 import android.view.WindowManager;
+import android.view.inputmethod.InputMethodManager;
 import android.webkit.ConsoleMessage;
 import android.webkit.CookieManager;
 import android.webkit.DownloadListener;
 import android.webkit.GeolocationPermissions;
 import android.webkit.JavascriptInterface;
+import android.webkit.JsPromptResult;
+import android.webkit.JsResult;
 import android.webkit.RenderProcessGoneDetail;
+import android.webkit.ServiceWorkerClient;
+import android.webkit.ServiceWorkerController;
 import android.webkit.SslErrorHandler;
 import android.webkit.PermissionRequest;
 import android.webkit.URLUtil;
@@ -40,6 +47,7 @@ import android.webkit.WebResourceResponse;
 import android.webkit.WebSettings;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
+import android.widget.Button;
 import android.widget.FrameLayout;
 
 import androidx.annotation.Nullable;
@@ -88,18 +96,54 @@ import com.reactnativecommunity.webview.events.TopRenderProcessGoneEvent;
 import org.json.JSONException;
 import org.json.JSONObject;
 
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
+import java.lang.reflect.Field;
+import java.net.CookieStore;
+import java.net.HttpCookie;
+import java.net.HttpURLConnection;
 import java.net.MalformedURLException;
+import java.net.URI;
+import java.net.URISyntaxException;
 import java.net.URL;
 import java.net.URLEncoder;
+import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
+import java.nio.charset.UnsupportedCharsetException;
+import java.text.Bidi;
 import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
+import java.util.Objects;
+import java.util.Set;
 import java.util.concurrent.atomic.AtomicReference;
 
+import okhttp3.MediaType;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
+
+import android.view.inputmethod.BaseInputConnection;
+import android.view.inputmethod.EditorInfo;
+import android.view.inputmethod.InputConnection;
+
+
+import android.content.DialogInterface;
+import android.os.Bundle;
+import android.widget.Toast;
+
+import androidx.appcompat.app.AlertDialog;
+import androidx.appcompat.app.AppCompatActivity;
+
 /**
  * Manages instances of {@link WebView}
  * <p>

// TODO: RNCWebViewManagerImpl.kt ****************************************************************************************************
@@ -137,13 +181,19 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
   public static final int COMMAND_LOAD_URL = 7;
   public static final int COMMAND_FOCUS = 8;
 
+  protected static final String MIME_UNKNOWN = "application/octet-stream";
+  protected static final String HTML_ENCODING = "UTF-8";
+  protected static final long BYTES_IN_MEGABYTE = 1000000;
+
   // android commands
   public static final int COMMAND_CLEAR_FORM_DATA = 1000;
   public static final int COMMAND_CLEAR_CACHE = 1001;
   public static final int COMMAND_CLEAR_HISTORY = 1002;
 
   protected static final String REACT_CLASS = "RNCWebView";
-  protected static final String HTML_ENCODING = "UTF-8"; // TODO: RNCWebViewManagerImpl.kt line 49
+
+  protected static final String HEADER_CONTENT_TYPE = "content-type";
+
   protected static final String HTML_MIME_TYPE = "text/html";
   protected static final String JAVASCRIPT_INTERFACE = "ReactNativeWebView";
   protected static final String HTTP_METHOD_POST = "POST";
@@ -155,13 +205,19 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
 
   protected RNCWebChromeClient mWebChromeClient = null;
   protected boolean mAllowsFullscreenVideo = false;
-  protected @Nullable String mUserAgent = null;
-  protected @Nullable String mUserAgentWithApplicationName = null;
+  protected @Nullable String RNUserAgent = null;
+  protected @Nullable String RNUserAgentWithApplicationName = null;
+  protected static String deviceUserAgent;
+
+  protected static OkHttpClient httpClient;
 
 // TODO: how is this configured in RNCWebViewManagerImpl.kt?
   public RNCWebViewManager() {
-    mWebViewConfig = new WebViewConfig() {
-      public void configWebView(WebView webView) {
-      }
+    mWebViewConfig = webView -> {
+      httpClient = new OkHttpClient.Builder()
+        .cookieJar(new CustomCookieJar())
+        .followRedirects(false)
+        .followSslRedirects(false)
+        .build();
     };
   }
 
// TODO: RNCWebViewManagerImpl.kt ****************************************************************************************************
@@ -182,6 +238,7 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
   @TargetApi(Build.VERSION_CODES.LOLLIPOP)
   protected WebView createViewInstance(ThemedReactContext reactContext) {
     RNCWebView webView = createRNCWebViewInstance(reactContext); // TODO: RNCWebViewManagerImpl.kt line 66
+    deviceUserAgent = webView.getSettings().getUserAgentString();
     setupWebChromeClient(reactContext, webView);
     reactContext.addLifecycleEventListener(webView);
     mWebViewConfig.configWebView(webView);
@@ -209,47 +266,161 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
     }
 
     webView.setDownloadListener(new DownloadListener() { // TODO: RNCWebViewManagerImpl.kt line 93
+      protected ReactContext mReactContext;
+
       public void onDownloadStart(String url, String userAgent, String contentDisposition, String mimetype, long contentLength) {
         webView.setIgnoreErrFailedForThisURL(url); // TODO: RNCWebViewManagerImpl.kt line 94
+        this.mReactContext = reactContext;
 
         RNCWebViewModule module = getModule(reactContext);
-
         DownloadManager.Request request = new DownloadManager.Request(Uri.parse(url));
-
         String fileName = URLUtil.guessFileName(url, contentDisposition, mimetype); // TODO: RNCWebViewManagerImpl.kt line 102
-        String downloadMessage = "Downloading " + fileName;
+        //Filename validation checking for files that use RTL characters and do not allow those types
+        if(fileName == null || (fileName != null && (new Bidi(fileName, Bidi.DIRECTION_DEFAULT_LEFT_TO_RIGHT).isMixed()))) {
+          Toast.makeText(mReactContext, "Invalid filename or type", Toast.LENGTH_SHORT).show();
+        } else {
+          AlertDialog.Builder builder = new AlertDialog.Builder(mReactContext);
+          builder.setMessage("Do you want to download \n" + fileName + "?");
+          builder.setCancelable(false);
+          builder.setPositiveButton("Download", new DialogInterface.OnClickListener() {
+            public void onClick(DialogInterface dialog, int which) {
+              String downloadMessage = "Downloading " + fileName;
+
+              //Attempt to add cookie, if it exists
+              URL urlObj = null;
+              try {
+                urlObj = new URL(url);
+                String baseUrl = urlObj.getProtocol() + "://" + urlObj.getHost();
+                String cookie = CookieManager.getInstance().getCookie(baseUrl);
+                request.addRequestHeader("Cookie", cookie);
+              } catch (MalformedURLException e) {
+                System.out.println("Error getting cookie for DownloadManager: " + e.toString());
+                e.printStackTrace();
+              }
 
-        //Attempt to add cookie, if it exists // TODO: RNCWebViewManagerImpl.kt line 109
-        URL urlObj = null;
-        try {
-          urlObj = new URL(url);
-          String baseUrl = urlObj.getProtocol() + "://" + urlObj.getHost();
-          String cookie = CookieManager.getInstance().getCookie(baseUrl);
-          request.addRequestHeader("Cookie", cookie);
-        } catch (MalformedURLException e) {
-          System.out.println("Error getting cookie for DownloadManager: " + e.toString());
-          e.printStackTrace();
+              //Finish setting up request
+              request.addRequestHeader("User-Agent", userAgent);
+              request.setTitle(fileName);
+              request.setDescription(downloadMessage);
+              request.allowScanningByMediaScanner();
+              request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);
+              request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, fileName);
+              module.setDownloadRequest(request);
+              if (module.grantFileDownloaderPermissions()) {
+                module.downloadFile();
+              }
+            }
+          });
+          builder.setNegativeButton("Cancel", (DialogInterface.OnClickListener) (dialog, which) -> {
+            return;
+          });
+          AlertDialog alertDialog = builder.create();
+          alertDialog.show();
         }
+      }
+    });
 
-        //Finish setting up request // TODO: RNCWebViewManagerImpl.kt line 120
-        request.addRequestHeader("User-Agent", userAgent);
-        request.setTitle(fileName);
-        request.setDescription(downloadMessage);
-        request.allowScanningByMediaScanner();
-        request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);
-        request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, fileName);
+    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+      ServiceWorkerController swController = ServiceWorkerController.getInstance();
+      swController.setServiceWorkerClient(new ServiceWorkerClient() {
+        @Override
+        public WebResourceResponse shouldInterceptRequest(WebResourceRequest request) {
+          String method = request.getMethod();
 
-        module.setDownloadRequest(request);
+          if (method.equals("GET")) {
+            WebResourceResponse response = RNCWebViewManager.this.shouldInterceptRequest(request, false, webView);
+            if (response != null) {
+              return response;
+            }
+          }
 
-        if (module.grantFileDownloaderPermissions()) {
-          module.downloadFile();
+          return super.shouldInterceptRequest(request);
         }
-      }
-    });
+      });
+    }
 
     return webView;
   }


// TODO: needs to be added to RNCWebViewManagerImpl.kt? ****************************************************************************************************
+  private Boolean urlStringLooksInvalid(String urlString) {
+    return urlString == null ||
+      urlString.trim().equals("") ||
+      !(urlString.startsWith("http") && !urlString.startsWith("www")) ||
+      urlString.contains("|");
+  }
+
+  public static Boolean responseRequiresJSInjection(Response response) {
+    if (response.isRedirect()) {
+      return false;
+    }
+    final String contentTypeAndCharset = response.header(HEADER_CONTENT_TYPE, MIME_UNKNOWN);
+    final int responseCode = response.code();
+
+    boolean contentTypeIsHtml = contentTypeAndCharset.startsWith(HTML_MIME_TYPE);
+    boolean responseCodeIsInjectible = responseCode == 200;
+    String responseBody = "";
+
+    if (contentTypeIsHtml && responseCodeIsInjectible) {
+      try {
+        assert response.body() != null;
+        responseBody = response.peekBody(BYTES_IN_MEGABYTE).string();
+      } catch (IOException e) {
+        e.printStackTrace();
+        return false;
+      }
+
+
+      boolean responseBodyContainsHTMLLikeString = responseBody.matches("[\\S\\s]*<[a-z]+[\\S\\s]*>[\\S\\s]*");
+      return responseBodyContainsHTMLLikeString;
+    } else {
+      return false;
+    }
+  }
+
+  public WebResourceResponse shouldInterceptRequest(WebResourceRequest request, Boolean onlyMainFrame, RNCWebView webView) {
+    Uri url = request.getUrl();
+    String urlStr = url.toString();
+
+    if (onlyMainFrame && !request.isForMainFrame() ||
+      urlStringLooksInvalid(urlStr)) {
+      return null;
+    }
+
+    String _userAgent;
+
+    if (RNUserAgent != null) {
+      _userAgent = RNUserAgent;
+    } else {
+      _userAgent = deviceUserAgent;
+    }
+
+    try {
+      Request req = new Request.Builder()
+        .url(urlStr)
+        .header("User-Agent", _userAgent)
+        .build();
+
+      Response response = httpClient.newCall(req).execute();
+
+      if (!responseRequiresJSInjection(response)) {
+        return null;
+      }
+
+      InputStream is = response.body().byteStream();
+      MediaType contentType = response.body().contentType();
+      Charset charset = contentType != null ? contentType.charset(StandardCharsets.UTF_8) : StandardCharsets.UTF_8;
+
+      RNCWebView reactWebView = (RNCWebView) webView;
+      if (response.code() == HttpURLConnection.HTTP_OK) {
+        is = new InputStreamWithInjectedJS(is, reactWebView.injectedJSBeforeContentLoaded, charset);
+      }
+
+      return new WebResourceResponse("text/html", charset.name(), is);
+    } catch (IOException e) {
+      return null;
+    }
+  }
+
   @ReactProp(name = "javaScriptEnabled")
   public void setJavaScriptEnabled(WebView view, boolean enabled) { 
     view.getSettings().setJavaScriptEnabled(enabled);
@@ -285,13 +456,10 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
     if (enabled) {
       Context ctx = view.getContext();
       if (ctx != null) {
        // TODO: search fork for this, logic seems to be separated into multiple files
-        view.getSettings().setAppCachePath(ctx.getCacheDir().getAbsolutePath());
         view.getSettings().setCacheMode(WebSettings.LOAD_DEFAULT);
-        view.getSettings().setAppCacheEnabled(true);
       }
     } else {
       view.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);
-      view.getSettings().setAppCacheEnabled(false);
     }
   }

// TODO: RNCWebViewManagerImpl.kt ****************************************************************************************************
@@ -387,9 +555,9 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
   @ReactProp(name = "userAgent")
   public void setUserAgent(WebView view, @Nullable String userAgent) {
     if (userAgent != null) {
-      mUserAgent = userAgent; // TODO: RNCWebViewManagerImpl.kt line 227
+      RNUserAgent = userAgent;
     } else {
-      mUserAgent = null;
+      RNUserAgent = null;
     }
     this.setUserAgentString(view);
   }
@@ -399,19 +567,19 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
     if(applicationName != null) {
       if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
         String defaultUserAgent = WebSettings.getDefaultUserAgent(view.getContext());
-        mUserAgentWithApplicationName = defaultUserAgent + " " + applicationName; // TODO: RNCWebViewManagerImpl.kt line 235
+        RNUserAgentWithApplicationName = defaultUserAgent + " " + applicationName;
       }
     } else {
-      mUserAgentWithApplicationName = null;
+      RNUserAgentWithApplicationName = null;
     }
     this.setUserAgentString(view);
   }
 
   protected void setUserAgentString(WebView view) { // TODO: RNCWebViewManagerImpl.kt line 244
-    if(mUserAgent != null) {
-      view.getSettings().setUserAgentString(mUserAgent);
-    } else if(mUserAgentWithApplicationName != null) {
-      view.getSettings().setUserAgentString(mUserAgentWithApplicationName);
+    if(RNUserAgent != null) {
+      view.getSettings().setUserAgentString(RNUserAgent);
+    } else if(RNUserAgentWithApplicationName != null) {
+      view.getSettings().setUserAgentString(RNUserAgentWithApplicationName);
     } else if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
       // handle unsets of `userAgent` prop as long as device is >= API 17
       view.getSettings().setUserAgentString(WebSettings.getDefaultUserAgent(view.getContext()));
@@ -490,7 +658,6 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
 
     // Disable caching
     view.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE); // TODO: RNCWebViewManagerImpl.kt line 471
-    view.getSettings().setAppCacheEnabled(false); 
     view.clearHistory();
     view.clearCache(true);
 
@@ -842,13 +1009,116 @@ public class RNCWebViewManager extends SimpleViewManager<WebView> {
     }
   }
 
-  protected static class RNCWebViewClient extends WebViewClient { // TODO: add to RNCWebViewClient.java
+  public static class InputStreamWithInjectedJS extends InputStream {
+    private InputStream pageIS;
+    private InputStream scriptIS;
+    private Charset charset;
+    private static final String REACT_CLASS = "InputStreamWithInjectedJS";
+    private static Map<Charset, String> script = new HashMap<>();
+
+    private boolean hasJS = false;
+    private boolean headWasFound = false;
+    private boolean scriptWasInjected = false;
+
+    private int lowercaseD = 100;
+    private int closingTag = 62;
+    private boolean hasClosingHead = false;
+
+    private StringBuffer contentBuffer = new StringBuffer();
+
+    @SuppressLint("LongLogTag")
+    private static Charset getCharset(String charsetName) {
+      Charset cs = StandardCharsets.UTF_8;
+      try {
+        if (charsetName != null) {
+          cs = Charset.forName(charsetName);
+        }
+      } catch (UnsupportedCharsetException e) {
+        Log.d(REACT_CLASS, "wrong charset: " + charsetName);
+      }
+
+      return cs;
+    }
+
+    private static InputStream getScript(Charset charset) {
+      String js = script.get(charset);
+      if (js == null) {
+        String defaultJs = script.get(StandardCharsets.UTF_8);
+        js = new String(defaultJs.getBytes(StandardCharsets.UTF_8), charset);
+        script.put(charset, js);
+      }
+
+      return new ByteArrayInputStream(js.getBytes(charset));
+    }
+
+    InputStreamWithInjectedJS(InputStream is, String js, Charset charset) {
+      if (js == null) {
+        this.pageIS = is;
+      } else {
+        this.hasJS = true;
+        this.charset = charset;
+        Charset cs = StandardCharsets.UTF_8;
+        String jsScript = "<script>" + js + "</script>";
+        script.put(cs, jsScript);
+        this.pageIS = is;
+      }
+    }
+
+    @Override
+    public int read() throws IOException {
+      if (scriptWasInjected || !hasJS) {
+        return pageIS.read();
+      }
+
+      if (!scriptWasInjected && headWasFound) {
+        int nextByte;
+        if (!hasClosingHead) {
+          nextByte = pageIS.read();
+          if (nextByte != closingTag) {
+            return nextByte;
+          }
+          hasClosingHead = true;
+          return nextByte;
+        }
+        nextByte = scriptIS.read();
+        if (nextByte == -1) {
+          scriptIS.close();
+          scriptWasInjected = true;
+          return pageIS.read();
+        } else {
+          return nextByte;
+        }
+      }
+
+      if (!headWasFound) {
+        int nextByte = pageIS.read();
+        contentBuffer.append((char) nextByte);
+        int bufferLength = contentBuffer.length();
+        if (nextByte == lowercaseD && bufferLength >= 5) {
+          if (contentBuffer.substring(bufferLength - 5).equals("<head")) {
+            this.scriptIS = getScript(this.charset);
+            headWasFound = true;
+          }
+        }
+
+        return nextByte;
+      }
+
+      return pageIS.read();
+    }
+
+  }
+